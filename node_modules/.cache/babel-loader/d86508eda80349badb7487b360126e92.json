{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\quizGame\\\\game\\\\src\\\\components\\\\controls\\\\chart\\\\chart.js\";\nimport React, { Component } from 'react';\nimport { CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        name: \"A\",\n        votes: 0\n      }, {\n        name: \"B\",\n        votes: 0\n      }, {\n        name: \"C\",\n        votes: 0\n      }, {\n        name: \"D\",\n        votes: 0\n      }]\n    };\n    this.generateData = this.generateData.bind(this);\n    this.getRandomInt = this.getRandomInt.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateData();\n  }\n\n  generateData() {\n    let arr = [this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt()];\n    arr = arr.sort((a, b) => {\n      return b - a;\n    });\n    let answ = this.state.data.find(el => el.name === this.props.answer.toUpperCase());\n    let restAnsw = this.state.data.filter(el => el !== answ);\n    answ.votes = arr[0];\n\n    for (let i = 0; i < restAnsw.length; i++) {\n      restAnsw[i].votes = arr[i + 1];\n    }\n  }\n\n  getRandomInt() {\n    return Math.floor(Math.random() * Math.floor(100));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.props.classes,\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          width: 300,\n          height: 160,\n          data: this.state.data,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"1 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"votes\",\n            name: \"\\u0433\\u043B\\u0430\\u0441\\u043E\\u0432\\u0435\",\n            fill: \"darkblue\",\n            barSize: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["D:/Projects/quizGame/game/src/components/controls/chart/chart.js"],"names":["React","Component","CartesianGrid","XAxis","YAxis","Tooltip","Legend","BarChart","Bar","ResponsiveContainer","Chart","constructor","props","state","data","name","votes","generateData","bind","getRandomInt","componentDidMount","arr","sort","a","b","answ","find","el","answer","toUpperCase","restAnsw","filter","i","length","Math","floor","random","render","classes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { CartesianGrid, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, ResponsiveContainer } from 'recharts';\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [{\r\n                name: \"A\",\r\n                votes: 0\r\n            },\r\n            {\r\n                name: \"B\",\r\n                votes: 0,\r\n            },\r\n            {\r\n                name: \"C\",\r\n                votes: 0,\r\n            },\r\n            {\r\n                name: \"D\",\r\n                votes: 0\r\n            }]\r\n        }\r\n        this.generateData = this.generateData.bind(this);\r\n        this.getRandomInt = this.getRandomInt.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateData();\r\n    }\r\n\r\n    generateData() {\r\n        let arr = [this.getRandomInt(), this.getRandomInt(), this.getRandomInt(), this.getRandomInt()];\r\n        arr = arr.sort((a, b) => { return b - a; });\r\n        let answ = this.state.data.find(el => el.name === this.props.answer.toUpperCase());\r\n        let restAnsw = this.state.data.filter(el => el !== answ);\r\n        answ.votes = arr[0];\r\n        for (let i = 0; i < restAnsw.length; i++) {\r\n            restAnsw[i].votes = arr[i + 1];\r\n        }\r\n    }\r\n\r\n    getRandomInt() {\r\n        return Math.floor(Math.random() * Math.floor(100));\r\n    }\r\n\r\n    render() {\r\n        return (<div className={this.props.classes}>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart width={300} height={160} data={this.state.data}>\r\n                    <CartesianGrid strokeDasharray=\"1 1\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"votes\" name=\"гласове\" fill=\"darkblue\" barSize={50} />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}